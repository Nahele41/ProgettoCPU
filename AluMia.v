/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


// Coder con tre bit di ingresso e due di uscita
module CoderMio (
  input Z0,
  input Z1,
  input Z2,
  output Y0,
  output Y1
);
  assign Y0 = (Z0 & Z1);
  assign Y1 = (Z0 & Z2);
endmodule
module DIG_Add
#(
    parameter Bits = 1
)
(
    input [(Bits-1):0] a,
    input [(Bits-1):0] b,
    input c_i,
    output [(Bits - 1):0] s,
    output c_o
);
   wire [Bits:0] temp;

   assign temp = a + b + c_i;
   assign s = temp [(Bits-1):0];
   assign c_o = temp[Bits];
endmodule



module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module AluMia (
  input [31:0] A,
  input X0,
  input [31:0] B,
  input X1,
  input X2,
  output R,
  output [31:0] S
);
  wire [31:0] s0;
  wire [31:0] s1;
  wire [31:0] s2;
  wire [31:0] s3;
  wire [1:0] s4;
  wire [31:0] s5;
  wire [31:0] s6;
  wire s7;
  wire s8;
  assign s3 = ~ B;
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i0 (
    .sel( X0 ),
    .in_0( 32'b0 ),
    .in_1( A ),
    .out( s0 )
  );
  assign s6 = (B & A);
  assign s5 = (B | A);
  CoderMio CoderMio_i1 (
    .Z0( X0 ),
    .Z1( X1 ),
    .Z2( X2 ),
    .Y0( s7 ),
    .Y1( s8 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i2 (
    .sel( X1 ),
    .in_0( B ),
    .in_1( s3 ),
    .out( s1 )
  );
  assign s4[0] = s7;
  assign s4[1] = s8;
  DIG_Add #(
    .Bits(32)
  )
  DIG_Add_i3 (
    .a( s0 ),
    .b( s1 ),
    .c_i( X2 ),
    .s( s2 ),
    .c_o( R )
  );
  Mux_4x1_NBits #(
    .Bits(32)
  )
  Mux_4x1_NBits_i4 (
    .sel( s4 ),
    .in_0( s2 ),
    .in_1( s5 ),
    .in_2( s6 ),
    .in_3( s2 ),
    .out( S )
  );
endmodule
